const {GraphQLServer} = require('graphql-yoga');
const { prisma } = require('./generated/prisma-client')
const Query = require('./resolvers/Query')
const Mutation = require('./resolvers/Mutation')
const User = require('./resolvers/User')
const Link = require('./resolvers/Link')
const Subscription = require('./resolvers/Subscription')
const Vote = require('./resolvers/Vote')

const resolvers = {
  Query,
  Mutation,
  Subscription,
  User,
  Link,
  Vote,
}

  const server = new GraphQLServer({
    typeDefs: './schema.graphql',
    resolvers,
    context: request => {
      return {
        ...request,
        prisma,
      }
    },
  })

server.start(()=>console.log(`Server is running on http://localhost:4000`))



/*

As usual index.js is the starting point.

We create a prisma folder and include datamodel and yml file. yml has a path of the generated prisma-client

The datamodel.prisma is the model for physical database. Inside prisma client will be the methods and references to
deal with database. They get autogenerated according to our database model.

Then we create a schema.graphql file which contain the application model. Application model exposes and controls 
the funtions and services provided by the API. For example in the database model User type has 5 feilds including
password. But in the schema.graphql, the type User has only 4 feilds excluding the password. This means the API has
access to only 4 feilds.

And next we have to create a resolvers folder and make files for each resolvers (if necessary). And in the resolver files
we have to add methods exactly in the same name as the corresponding feilds. No need to create functions for trivial
feilds.

Then in the index.js file we have to make necessary imports and create an instance of GraphQLServer by passing the schema 
and resolvers.







*/